#include "file.h"#include "components.h"#include "memtrace.h"/** * \file file.cpp * * Ez a fájl tartalmazza a fájlból olvasáshoz, és fájlba íráshoz szükséges osztályok tagfüggvényeinek megvalósítását */using namespace std;void File::Writer::write() {    ofstream file;    if ( !file.fail() )    {        file.open( path.c_str() );        file << buffer;        file.close();    }    else    {        throw ofstream::failure( "Error while writing to file" );    }}void File::Writer::parse(Components::LinkedList<String> &input) {    buffer = "<Instructions>\n";    Components::LinkedList<String>::Iterator start = input.begin();    Components::LinkedList<String>::Iterator end = input.end();    while ( start != end )    {        buffer = buffer + (*start) + "\n";        start++;    }    buffer = buffer + "</Instructions>";}void File::Writer::parse(Components::LinkedList<Components::IngredientQ> &input) {    buffer = "<IngredientQ>\n";    Components::LinkedList<Components::IngredientQ>::Iterator start = input.begin();    Components::LinkedList<Components::IngredientQ>::Iterator end = input.end();    while ( start != end )    {        stringstream stream;        stream << start->getQuantity();        buffer = buffer + start->getName() + ";" + start->getUnit() + ";" + (stream.str().c_str()) + "\n";        start++;    }    buffer = buffer + "</IngredientQ>";}void File::Writer::parse(Components::LinkedList<Components::Recipe> &input) {    String tmpBuffer = "<RecipeList>\n";    Components::LinkedList<Components::Recipe>::Iterator start = input.begin();    Components::LinkedList<Components::Recipe>::Iterator end = input.end();    while ( start != end )    {        tmpBuffer = tmpBuffer + "<Recipe>\n<Title>\n" + start->getTitle() + "\n</Title>\n";        parse( *start->getIngredients() );        tmpBuffer = tmpBuffer + buffer + "\n";        parse( *start->getInstructions() );        tmpBuffer = tmpBuffer + buffer + "\n</Recipe>\n";        start++;    }    tmpBuffer = tmpBuffer + "</RecipeList>";    buffer = tmpBuffer;}void File::Writer::parse(Components::LinkedList<Components::Ingredient> &input) {    buffer = "<Ingredient>\n";    Components::LinkedList<Components::Ingredient>::Iterator start = input.begin();    Components::LinkedList<Components::Ingredient>::Iterator end = input.end();    while ( start != end )    {        buffer = buffer + start->getName() + ";" + start->getUnit() + "\n";        start++;    }    buffer = buffer + "</Ingredient>";}void File::Reader::read() {    string line;    ifstream file( path.c_str() );    buffer.clear();    if ( file.is_open() )    {        while ( getline ( file,line ) )        {            string tmp = line;            trim( tmp );            if ( !tmp.empty() ) buffer.push( line.c_str() );        }        file.close();    }    else    {        throw ifstream::failure("Hiba tortent a(z) \"" + std::string(path.c_str()) + "\" megnyitasa kozben!");    }}void File::Reader::parseRecipe( Components::LinkedList<Components::Recipe>& newList ) {    Components::LinkedList<String>::Iterator start = buffer.begin();    Components::LinkedList<String>::Iterator end = buffer.end();    bool read = false;    int stage = 0;    Components::Recipe* currentRecipe;    for ( ; start != end; start++ )    {        if ( (*start) == "<RecipeList>" ) { read = true; continue; }        else if ( (*start) == "</RecipeList>" ) { read = false; continue; }        if ( read && (*start) == "<Recipe>" ) { stage = 1; currentRecipe = new Components::Recipe(); continue; }        if ( read && (*start) == "</Recipe>" )        {            stage = 0;            std::string tmp = currentRecipe->getTitle().c_str();            if ( !trim(tmp).empty() ) newList.push( *currentRecipe );            currentRecipe->setInstructions(nullptr);            currentRecipe->setIngredients(nullptr);            delete currentRecipe;            continue;        }        if ( !read ) continue;        switch ( stage )        {            case 1: // Title            {                if ( (*start) == "<Title>" ) continue;                if ( (*start) == "</Title>" ) { stage++; continue; }                currentRecipe->setTitle( *start );                break;            }            case 2: // IngredientQ            {                if ( (*start) == "<IngredientQ>" ) { currentRecipe->setIngredients( new Components::LinkedList<Components::IngredientQ>() ); continue; }                if ( (*start) == "</IngredientQ>" ) { stage++; continue; }                if ( (*start).size() < 3 ) continue;                std::stringstream line( (*start).c_str() );                std::vector<std::string> list;                std::string segment;                while ( std::getline( line, segment, ';' ) )                {                    list.push_back( segment );                }                int num;                try {                    if ( list.size() != 3 || list[0].empty() || list[1].empty() ) throw std::invalid_argument("hibas sor");                    num = std::stoi( list[2] );                } catch( ... ) { cerr << "Hibas formatum fajlbeolvasas kozben! Hibas sor: \"" << *start << "\"" << endl; break; }                if ( currentRecipe->getIngredients()->contains( Components::IngredientQ( String(list[0].c_str()), String(), 0 ) ) ) continue;                currentRecipe->getIngredients()->push( Components::IngredientQ( String(list[0].c_str()), String(list[1].c_str()), num ) );                break;            }            case 3: // Instructions            {                if ( (*start) == "<Instructions>" ) { currentRecipe->setInstructions( new Components::LinkedList<String>() ); continue; }                if ( (*start) == "</Instructions>" ) { stage = 1; continue; }                std::string tmp = start->c_str();                if ( !trim(tmp).empty() ) currentRecipe->getInstructions()->push( *start );                break;            }        }    }}void File::Reader::parseIngredient(Components::LinkedList<Components::Ingredient>& newList) {    Components::LinkedList<String>::Iterator start = buffer.begin();    Components::LinkedList<String>::Iterator end = buffer.end();    Components::Ingredient* currentIngredient;    bool read = false;    for ( ; start != end; start++ )    {        if ( (*start) == "<Ingredient>" ) { read = true; continue; }        else if ( (*start) == "</Ingredient>" ) { read = false; continue; }        if ( !read ) continue;        std::stringstream line( (*start).c_str() );        std::vector<std::string> list;        std::string segment;        while ( std::getline( line, segment, ';' ) )        {            list.push_back( segment );        }        if ( list.size() != 2 || list[0].empty() || list[1].empty() ) { cerr << "Hibas sor fajlbeolvasas kozban! Kapott input: \"" << *start << "\"" << endl; continue; }        if ( newList.contains( Components::Ingredient( String(list[0].c_str()), String() ) ) ) continue;        currentIngredient =  new Components::Ingredient(String(list[0].c_str()), String(list[1].c_str()));        newList.push( *currentIngredient );        delete currentIngredient;    }}void File::Reader::parseIngredientQ( Components::LinkedList<Components::IngredientQ>& newList ) {    Components::LinkedList<String>::Iterator start = buffer.begin();    Components::LinkedList<String>::Iterator end = buffer.end();    Components::IngredientQ* currentIngredientQ;    bool read = false;    for ( ; start != end; start++ )    {        if ( (*start) == "<IngredientQ>" ) { read = true; continue; }        else if ( (*start) == "</IngredientQ>" ) { read = false; continue; }        if ( !read ) continue;        std::stringstream line( (*start).c_str() );        std::vector<std::string> list;        std::string segment;        while ( std::getline( line, segment, ';' ) )        {            list.push_back( segment );        }        int num;        try {            if ( list.size() != 3 || list[0].empty() || list[1].empty() ) throw std::invalid_argument("hibas input");            num = std::stoi( list[2] );        } catch ( ... ) { cerr << "Hibas sor fajlbeolvasas kozban! Kapott input: \"" << *start << "\"" << endl; continue; }        if ( newList.contains( Components::IngredientQ( String(list[0].c_str()), String(), 0 ) ) ) continue;        currentIngredientQ =  new Components::IngredientQ(String(list[0].c_str()), String(list[1].c_str()), num);        newList.push( *currentIngredientQ );        delete currentIngredientQ;    }}